/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/chair.gltf --types --keepnames 
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useCustomize } from '../hooks/use-customize';

type GLTFResult = GLTF & {
  nodes: {
    Chair: THREE.Mesh;
    Cushion: THREE.Mesh;
    Legs1: THREE.Mesh;
    Legs2: THREE.Mesh;
  };
  materials: {
    Chair: THREE.MeshStandardMaterial;
    Cushion: THREE.MeshStandardMaterial;
    Legs: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[];
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// type ContextType = Record<
//   string,
//   React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
// >;

export function Chair(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('./models/chair.gltf') as GLTFResult;
  const ref = useRef(null);

  const { material, legs, cushionColor, chairColor } = useCustomize();

  const getColor = (color: string | null): THREE.Color | null => {
    return color ? new THREE.Color(color) : null;
  };

  const leatherTextureProps = useTexture({
    // map: './textures/leather/Leather_008_Base Color.jpg',
    normalMap: './textures/leather/Leather_008_Normal.jpg',
    roughnessMap: './textures/leather/Leather_008_Roughness.jpg',
    aoMap: './textures/leather/Leather_008_Ambient Occlusion.jpg',
  });

  // leatherTextureProps.map.repeat.set(3, 3);
  leatherTextureProps.normalMap.repeat.set(3, 3);
  leatherTextureProps.roughnessMap.repeat.set(3, 3);
  leatherTextureProps.aoMap.repeat.set(3, 3);

  // leatherTextureProps.map.wrapS =
  //   leatherTextureProps.map.wrapT =
  leatherTextureProps.normalMap.wrapS =
    leatherTextureProps.normalMap.wrapT =
    leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT =
    leatherTextureProps.aoMap.wrapS =
    leatherTextureProps.aoMap.wrapT =
      THREE.RepeatWrapping;

  const fabricTextureProps = useTexture({
    // map: './textures/fabric/Fabric_Knitted_006_basecolor.jpg',
    normalMap: './textures/fabric/Fabric_Knitted_006_normal.jpg',
    roughnessMap: './textures/fabric/Fabric_Knitted_006_roughness.jpg',
    aoMap: './textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg',
  });

  // fabricTextureProps.map.repeat.set(3, 3);
  fabricTextureProps.normalMap.repeat.set(3, 3);
  fabricTextureProps.roughnessMap.repeat.set(3, 3);
  fabricTextureProps.aoMap.repeat.set(3, 3);

  // fabricTextureProps.map.wrapS =
  //   fabricTextureProps.map.wrapT =
  fabricTextureProps.normalMap.wrapS =
    fabricTextureProps.normalMap.wrapT =
    fabricTextureProps.roughnessMap.wrapS =
    fabricTextureProps.roughnessMap.wrapT =
    fabricTextureProps.aoMap.wrapS =
    fabricTextureProps.aoMap.wrapT =
      THREE.RepeatWrapping;

  return (
    <group
      {...props}
      dispose={null}
      ref={ref}
      position={[0, 0, 0]}
      // scale={0.812}
    >
      <mesh geometry={nodes.Chair.geometry}>
        <meshStandardMaterial
          {...(material === 'leather'
            ? leatherTextureProps
            : fabricTextureProps)}
          color={getColor(chairColor.color)}
        />
      </mesh>
      <mesh
        name="Chair"
        geometry={nodes.Chair.geometry}
        material={materials.Chair}
      />
      <mesh
        name="Cushion"
        geometry={nodes.Cushion.geometry}
        // material={materials.Cushion}
        position={[0, 0.064, 0.045]}
      >
        <meshStandardMaterial
          {...fabricTextureProps}
          color={getColor(cushionColor.color)}
        />
      </mesh>
      <mesh
        name="Legs1"
        geometry={nodes.Legs1.geometry}
        material={materials.Legs}
        visible={legs === 1}
      />
      <mesh
        visible={legs === 2}
        name="Legs2"
        geometry={nodes.Legs2.geometry}
        material={materials.Legs}
      />
    </group>
  );
}

useGLTF.preload('/chair.gltf');

export default Chair;
